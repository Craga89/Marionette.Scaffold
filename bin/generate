#!/usr/bin/node

var path = require('path'),
	ncp = require('ncp'),
	fs = require('fs'),
	mv = require('mv'),
	Q = require('q'),
	baseDir = path.join(__dirname, '../'),
	scaffolds = path.join(baseDir, 'scaffolds'),
	modules = path.join(baseDir, 'app', 'modules');

function camel(s) {
	return s.charAt(0).toUpperCase() + s.substr(1);
}

function findReplace(file, replacements) {
	// Replace Scaffold with app name
	return Q.nfcall(fs.readFile, file, 'utf8').then(function(data) {
		// MAke all replacements
		for(i in replacements) {
			data = data.replace(replacements[i], i);
		}

		// Write the result file
		return Q.nfcall(fs.writeFile, file, data, 'utf8');
	}, console.error);
}

function createModule(name, page) {
	var dest = path.join(modules, name),
		appFile = path.join(dest, name+'_app.js'),
		replacements = {};

	// Setup replacements
	replacements[ camel(name) ] = new RegExp('Scaffold', 'gm');
	page && (replacements.index = page);

	// Copy to app/modules/<name>
	Q.nfcall(ncp, path.join(scaffolds, 'module'), dest)

	// Rename app.js to <name>_app.js
	.then(function() {
		return Q.nfcall(mv, path.join(dest, 'app.js'), appFile);
	})

	// Find and replace in the file
	.then(function() {
		return findReplace(appFile, replacements);
	})

	// Create index page
	.then(function() {	
		createPage(name, page || 'index');
	})

	// Error out on fail
	.fail(console.error);
}

function createPage(app, name) {
	var appDest = path.join(modules, app),
		dest = path.join(appDest, name),
		replacements = {};

	// Setup replacements
	replacements[ camel(name) ] = new RegExp('Scaffold', 'gm');
	replacements[ name ] = new RegExp('scaffold', 'gm');

	// Copy to modules/app/<name>
	Q.nfcall(ncp, path.join(scaffolds, 'page'), dest)

	// Find and replace in the files
	.then(function() {
		return Q.all(['controller.js', 'view.js'].map(function(file) {
			return findReplace( path.join(dest, file), replacements );
		}));
	})

	// Rename controller/view.js 
	.then(function() {
		return Q.all(['controller.js', 'view.js'].map(function(file) {
			return Q.nfcall(mv, path.join(dest, file), path.join(dest, name+'_'+file));
		}));
	})
	.then(function() {
		return Q.nfcall(mv, path.join(dest, 'templates', 'page.jade'), path.join(dest, 'templates', name+'.jade'));
	})

	// Error out on fail
	.fail(console.error);
}

function help() {
	console.info(
		"\nGenerate a new module:\n\t" + 
			"generate module <name> <page (index)>\n\n" + 

		"Generate a new page for a module:\n\t" + 
			"generate page <module> <name>\n"
	);
}

switch(process.argv[2]) {
	case 'module': createModule(process.argv[3], process.argv[4]); break;
	case 'page': createPage(process.argv[3], process.argv[4]); break;
	case 'help': help(); break;
	default: console.error('Invalid command'); break;
}